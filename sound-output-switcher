#!/usr/bin/env python

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Speaker (speaker.svg) by iconoci from The Noun Project


import gobject
import gtk
import appindicator
import subprocess
import os

thisDir = os.path.dirname(os.path.realpath(__file__));
iconPath = thisDir + "/speaker.svg"

active_profile = ""

def parseProfileLine(line):
	profile = line.split(' ')[0][0:-1]
	desc = ' '.join(line.split(' ')[1:])
	if profile.startswith("off"):
		return (False, (None, None))
	# Strip last parenthesis from description
	desc = '('.join(desc.split('(')[0:-1])
	return (True, (profile, desc))

def getProfilesWithDescriptions():
    	sp = subprocess.Popen(['pacmd', 'list-cards '], stdout=subprocess.PIPE).communicate()[0]
	sp = sp[0:-1].split('\n')

	result = []
	current_card = 0
	within_profile_list = False
	for line in sp:
		if line.strip().startswith("index:"):
			current_card = line.split(' ')[-1]
			print ("current_card " + str(current_card))
		elif line.startswith("\tprofiles:"):
			within_profile_list = True
			print "profile list start"
		elif line.startswith("\tactive profile:"):
			within_profile_list = False
			print "profile list end"
		elif within_profile_list:
			valid, (profile, desc) = parseProfileLine(line.strip())	
			if valid:
				result.append((current_card, profile, desc))

	return result
 
def menuCallback(w, (card, profile)):
  global active_profile
  if (profile != active_profile):
    print "Activate profile " + profile
    cmd = 'set-card-profile ' + card + ' ' + profile
    print cmd
    sp = subprocess.Popen(['pacmd', cmd], stdout=subprocess.PIPE).communicate()[0]
    print sp
    active_profile = profile

 
if __name__ == "__main__":
  thisDir = os.path.dirname(os.path.realpath(__file__));
  ind = appindicator.Indicator("sound-output-switcher",
                              iconPath,
                              appindicator.CATEGORY_HARDWARE)
  ind.set_status(appindicator.STATUS_ACTIVE)
  #ind.set_attention_icon("indicator-messages-new")
 
  profiles_with_descriptions = getProfilesWithDescriptions()
  print profiles_with_descriptions

  menu = gtk.Menu()
  group = gtk.RadioMenuItem()
  for card, profile, description in profiles_with_descriptions:
    menuItem = gtk.RadioMenuItem(group, description)
    menu.append(menuItem)
    menuItem.connect("activate", menuCallback, (card, profile))
    menuItem.show()
 
  ind.set_menu(menu)
 
  gtk.main()
